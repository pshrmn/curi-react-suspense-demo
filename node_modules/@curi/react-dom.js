'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var reactUniversal = require('@curi/react-universal');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

var canNavigate = function (event) {
    return (!event.defaultPrevented &&
        event.button === 0 &&
        !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey));
};
var BaseLink = /** #__PURE__ */ (function (_super) {
    __extends(BaseLink, _super);
    function BaseLink() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            navigating: false
        };
        _this.clickHandler = function (event) {
            var _a = _this.props, onClick = _a.onClick, router = _a.router, target = _a.target;
            if (onClick) {
                onClick(event);
            }
            if (canNavigate(event) && !target) {
                event.preventDefault();
                var _b = _this.props, name_1 = _b.to, params = _b.params, query = _b.query, state = _b.state, hash = _b.hash;
                var cancelled = void 0, finished = void 0;
                // only trigger re-renders when children uses state
                if (typeof _this.props.children === "function") {
                    cancelled = finished = function () {
                        if (!_this.removed) {
                            _this.setState({ navigating: false });
                        }
                    };
                    if (!_this.removed) {
                        _this.setState({ navigating: true });
                    }
                }
                router.navigate({
                    name: name_1,
                    params: params,
                    query: query,
                    state: state,
                    hash: hash,
                    cancelled: cancelled,
                    finished: finished
                });
            }
        };
        return _this;
    }
    BaseLink.prototype.render = function () {
        var _a = this.props, to = _a.to, params = _a.params, hash = _a.hash, query = _a.query, state = _a.state, onClick = _a.onClick, anchor = _a.anchor, router = _a.router, response = _a.response, forwardedRef = _a.forwardedRef, children = _a.children, rest = __rest(_a, ["to", "params", "hash", "query", "state", "onClick", "anchor", "router", "response", "forwardedRef", "children"]);
        var Anchor = anchor ? anchor : "a";
        var href = router.history.toHref({
            hash: hash,
            query: query,
            state: state,
            pathname: to
                ? router.route.pathname(to, params)
                : response.location.pathname
        });
        return (React.createElement(Anchor, __assign({}, rest, { onClick: this.clickHandler, href: href, ref: forwardedRef }), typeof children === "function"
            ? children(this.state.navigating)
            : children));
    };
    BaseLink.prototype.componentWillUnmount = function () {
        this.removed = true;
    };
    return BaseLink;
}(React.PureComponent));
var Link = React.forwardRef(function (props, ref) { return (React.createElement(reactUniversal.Curious, null, function (_a) {
    var router = _a.router, response = _a.response;
    return (React.createElement(BaseLink, __assign({}, props, { router: router, response: response, forwardedRef: ref })));
})); });

var FocusWithResponse = /** #__PURE__ */ (function (_super) {
    __extends(FocusWithResponse, _super);
    function FocusWithResponse(props) {
        var _this = _super.call(this, props) || this;
        _this.setRef = function (element) {
            _this.eleToFocus = element;
        };
        _this.eleToFocus = null;
        return _this;
    }
    FocusWithResponse.prototype.render = function () {
        var children = this.props.children;
        return children(this.setRef);
    };
    FocusWithResponse.prototype.componentDidMount = function () {
        this.focus();
    };
    FocusWithResponse.prototype.componentDidUpdate = function (prevProps) {
        // only re-focus when the response changes
        if (prevProps.response !== this.props.response) {
            this.focus();
        }
    };
    FocusWithResponse.prototype.focus = function () {
        var _this = this;
        // https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex#managing_focus_at_the_page_level
        if (this.eleToFocus !== null) {
            if (process.env.NODE_ENV !== "production") {
                if (!this.eleToFocus.hasAttribute("tabIndex") &&
                    this.eleToFocus.tabIndex === -1) {
                    console.warn('The component that is passed the ref must have a "tabIndex" prop or be focusable by default in order to be focused. ' +
                        "Otherwise, the document's <body> will be focused instead.");
                }
            }
            setTimeout(function () {
                // @ts-ignore
                _this.eleToFocus.focus({ preventScroll: _this.props.preventScroll });
            });
        }
    };
    FocusWithResponse.defaultProps = {
        preventScroll: false
    };
    return FocusWithResponse;
}(React.Component));
var Focus = function (props) { return (React.createElement(reactUniversal.Curious, null, function (_a) {
    var response = _a.response;
    return (React.createElement(FocusWithResponse, __assign({ response: response }, props), props.children));
})); };

Object.keys(reactUniversal).forEach(function (key) { exports[key] = reactUniversal[key]; });
exports.Link = Link;
exports.Focus = Focus;
