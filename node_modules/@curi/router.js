(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.Curi = {})));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    }

    function registerRoutes(routes, interaction, parentData) {
        routes.forEach(function (route) {
            var data = interaction.register(route.public, parentData);
            registerRoutes(route.children, interaction, data);
        });
    }

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * Default configs.
     */
    var DEFAULT_DELIMITER = '/';
    var DEFAULT_DELIMITERS = './';

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // ":test(\\d+)?" => ["test", "\d+", undefined, "?"]
      // "(\\d+)"  => [undefined, undefined, "\d+", undefined]
      '(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */
    function parse (str, options) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER;
      var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS;
      var pathEscaped = false;
      var res;

      while ((res = PATH_REGEXP.exec(str)) !== null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          pathEscaped = true;
          continue
        }

        var prev = '';
        var next = str[index];
        var name = res[2];
        var capture = res[3];
        var group = res[4];
        var modifier = res[5];

        if (!pathEscaped && path.length) {
          var k = path.length - 1;

          if (delimiters.indexOf(path[k]) > -1) {
            prev = path[k];
            path = path.slice(0, k);
          }
        }

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
          pathEscaped = false;
        }

        var partial = prev !== '' && next !== undefined && next !== prev;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = prev || defaultDelimiter;
        var pattern = capture || group;

        tokens.push({
          name: name || key++,
          prefix: prev,
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          partial: partial,
          pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'
        });
      }

      // Push any remaining characters.
      if (path || index < str.length) {
        tokens.push(path + str.substr(index));
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */
    function compile (str, options) {
      return tokensToFunction(parse(str, options))
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction (tokens) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
        }
      }

      return function (data, options) {
        var path = '';
        var encode = (options && options.encode) || encodeURIComponent;

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;
            continue
          }

          var value = data ? data[token.name] : undefined;
          var segment;

          if (Array.isArray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but got array')
            }

            if (value.length === 0) {
              if (token.optional) continue

              throw new TypeError('Expected "' + token.name + '" to not be empty')
            }

            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j], token);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '"')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
            segment = encode(String(value), token);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"')
            }

            path += token.prefix + segment;
            continue
          }

          if (token.optional) {
            // Prepend partial segment prefixes.
            if (token.partial) path += token.prefix;

            continue
          }

          throw new TypeError('Expected "' + token.name + '" to be ' + (token.repeat ? 'an array' : 'a string'))
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */
    function escapeString (str) {
      return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */
    function escapeGroup (group) {
      return group.replace(/([=!:$/()])/g, '\\$1')
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */
    function flags (options) {
      return options && options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {Array=}  keys
     * @return {!RegExp}
     */
    function regexpToRegexp (path, keys) {
      if (!keys) return path

      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            pattern: null
          });
        }
      }

      return path
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function arrayToRegexp (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      return new RegExp('(?:' + parts.join('|') + ')', flags(options))
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function stringToRegexp (path, keys, options) {
      return tokensToRegExp(parse(path, options), keys, options)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}  tokens
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function tokensToRegExp (tokens, keys, options) {
      options = options || {};

      var strict = options.strict;
      var start = options.start !== false;
      var end = options.end !== false;
      var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);
      var delimiters = options.delimiters || DEFAULT_DELIMITERS;
      var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');
      var route = start ? '^' : '';
      var isEndDelimited = tokens.length === 0;

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
          isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;
        } else {
          var capture = token.repeat
            ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'
            : token.pattern;

          if (keys) keys.push(token);

          if (token.optional) {
            if (token.partial) {
              route += escapeString(token.prefix) + '(' + capture + ')?';
            } else {
              route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';
            }
          } else {
            route += escapeString(token.prefix) + '(' + capture + ')';
          }
        }
      }

      if (end) {
        if (!strict) route += '(?:' + delimiter + ')?';

        route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';
      } else {
        if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';
        if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';
      }

      return new RegExp(route, flags(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {Array=}                keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */
    function pathToRegexp (path, keys, options) {
      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys)
      }

      if (Array.isArray(path)) {
        return arrayToRegexp(/** @type {!Array} */ (path), keys, options)
      }

      return stringToRegexp(/** @type {string} */ (path), keys, options)
    }
    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    var withLeadingSlash = function (path) {
        return path.charAt(0) === "/" ? path : "/" + path;
    };
    var withTrailingSlash = function (path) {
        return path.charAt(path.length - 1) === "/" ? path : path + "/";
    };
    var join = function (beginning, end) {
        return withTrailingSlash(beginning) + end;
    };

    function generatePathname(options) {
        var knownPaths = {};
        var cache = {};
        return {
            name: "pathname",
            register: function (route, parent) {
                var name = route.name, path = route.path;
                if (knownPaths[name] !== undefined) {
                    console.warn('A route with the name "' +
                        name +
                        '" already exists. Each route should' +
                        "have a unique name. By registering a route with a name that already exists, " +
                        "you are overwriting the existing one. This may break your application.");
                }
                var base;
                if (parent && knownPaths[parent]) {
                    base = knownPaths[parent];
                }
                knownPaths[name] = withLeadingSlash(base ? join(base, path) : path);
                return name;
            },
            get: function (name, params) {
                if (knownPaths[name] == null) {
                    console.error("Could not generate pathname for " + name + " because it is not registered.");
                    return;
                }
                var compile = cache[name]
                    ? cache[name]
                    : (cache[name] = pathToRegexp_1.compile(knownPaths[name]));
                return compile(params, options);
            },
            reset: function () {
                knownPaths = {};
                cache = {};
            }
        };
    }

    function createRedirect(redirectTo, interactions) {
        var name = redirectTo.name, params = redirectTo.params, rest = __rest(redirectTo, ["name", "params"]);
        var pathname = interactions.pathname(name, params);
        return __assign({ pathname: pathname }, rest);
    }
    function finishResponse(routeMatch, interactions, resolvedResults) {
        var route = routeMatch.route, match = routeMatch.match;
        var response = match;
        if (!route.response) {
            return response;
        }
        var _a = resolvedResults || {}, _b = _a.resolved, resolved = _b === void 0 ? null : _b, _c = _a.error, error = _c === void 0 ? null : _c;
        var responseModifiers = route.response({
            resolved: resolved,
            error: error,
            match: match
        });
        if (!responseModifiers) {
            return response;
        }
        var settableProperties = ["status", "error", "body", "data", "title", "redirectTo"];
        // only merge the valid properties onto the response
        settableProperties.forEach(function (p) {
            if (responseModifiers.hasOwnProperty(p)) {
                if (p === "redirectTo") {
                    // special case
                    response[p] = createRedirect(responseModifiers[p], interactions);
                }
                else {
                    response[p] = responseModifiers[p];
                }
            }
        });
        return response;
    }

    function parseParams(params, fns) {
        if (!fns) {
            return params;
        }
        var output = {};
        // For each param, attempt to parse it. However, if that
        // fails, fall back to the string value.
        for (var key in params) {
            var value = params[key];
            var fn = fns[key];
            if (fn) {
                try {
                    value = fn(value);
                }
                catch (e) {
                    console.error(e);
                    value = params[key];
                }
            }
            output[key] = value;
        }
        return output;
    }

    function matchRoute(route, pathname) {
        var testPath = pathname;
        var regExpMatch = route.pathMatching.re.exec(testPath);
        if (!regExpMatch) {
            return [];
        }
        var matchedSegment = regExpMatch[0], parsed = regExpMatch.slice(1);
        var params = {};
        route.pathMatching.keys.forEach(function (key, index) {
            params[key.name] = parsed[index];
        });
        var matches = [{ route: route, params: params }];
        // if there are no children routes, immediately accept the match
        if (!route.children.length) {
            return matches;
        }
        // children only need to match against unmatched segments
        var remainingSegments = testPath.slice(matchedSegment.length);
        var childrenLength = route.children.length;
        for (var i = 0; i < childrenLength; i++) {
            var matched = matchRoute(route.children[i], remainingSegments);
            if (matched.length) {
                matches = matches.concat(matched);
                break;
            }
        }
        // return matches if a child route matches or this route matches exactly
        return matches.length > 1 ||
            (route.pathMatching.mustBeExact && remainingSegments.length === 0)
            ? matches
            : [];
    }
    function createMatch(routeMatches, location) {
        var partials = [];
        var params = {};
        var bestMatch = routeMatches.pop();
        // handle ancestor routes
        routeMatches.forEach(function (match) {
            partials.push(match.route.public.name);
            Object.assign(params, parseParams(match.params, match.route.paramParsers));
        });
        // handle best match
        Object.assign(params, parseParams(bestMatch.params, bestMatch.route.paramParsers));
        return {
            route: bestMatch.route,
            match: {
                location: location,
                name: bestMatch.route.public.name,
                params: params,
                partials: partials
            }
        };
    }
    function matchLocation(location, routes) {
        // determine which route(s) match, then use the exact match
        // as the matched route and the rest as partial routes
        var routeLength = routes.length;
        for (var i = 0; i < routeLength; i++) {
            var routeMatches = matchRoute(routes[i], location.pathname);
            if (routeMatches.length) {
                return createMatch(routeMatches, location);
            }
        }
        // no matching route
        return {
            route: undefined,
            match: undefined
        };
    }

    /*
     * This will call any initial/every match functions for the matching route
     */
    function resolveRoute(match) {
        var resolve = match.route.public.resolve;
        var _a = Object.keys(resolve).reduce(function (acc, key) {
            acc.keys.push(key);
            acc.promises.push(resolve[key](match.match));
            return acc;
        }, { keys: [], promises: [] }), keys = _a.keys, promises = _a.promises;
        return Promise.all(promises).then(function (results) {
            return {
                resolved: results.reduce(function (acc, curr, index) {
                    acc[keys[index]] = curr;
                    return acc;
                }, {}),
                error: null
            };
        }, function (error) { return ({ error: error, resolved: null }); });
    }

    var createRoute = function (options) {
        var path = options.path;
        if (path.charAt(0) === "/") {
            {
                console.warn("Route paths cannot start with a forward slash (/). (Received \"" + path + "\")");
            }
            path = path.slice(1);
        }
        var pathOptions = options.pathOptions || {};
        // end defaults to true, so end has to be hardcoded for it to be false
        // set this resolve setting pathOptions.end for children
        var mustBeExact = pathOptions.end == null || pathOptions.end;
        var children = [];
        // when we have child routes, we need to perform non-end matching and
        // create route objects for each child
        if (options.children && options.children.length) {
            pathOptions.end = false;
            children = options.children.map(createRoute);
        }
        // keys is populated by PathToRegexp
        var keys = [];
        // path is compiled with a leading slash
        // for optional initial params
        var re = pathToRegexp_1(withLeadingSlash(path), keys, pathOptions);
        var resolve = options.resolve || {};
        return {
            public: {
                name: options.name,
                path: path,
                keys: keys.map(function (key) { return key.name; }),
                resolve: resolve,
                extra: options.extra
            },
            pathMatching: {
                re: re,
                keys: keys,
                mustBeExact: mustBeExact
            },
            sync: !Object.keys(resolve).length,
            response: options.response,
            children: children,
            paramParsers: options.params
        };
    };

    function createRouter(history, routeArray, options) {
        if (options === void 0) { options = {}; }
        var _a = options.route, userInteractions = _a === void 0 ? [] : _a, _b = options.sideEffects, sideEffects = _b === void 0 ? [] : _b, _c = options.emitRedirects, emitRedirects = _c === void 0 ? true : _c, _d = options.suspend, suspend = _d === void 0 ? false : _d;
        var routes = [];
        var routeInteractions = {};
        // the navigation currently being processed
        var activeNavigation;
        // the last finish response & navigation
        var mostRecent = {
            response: null,
            navigation: null
        };
        // when true, navigation.previous will re-use the previous
        // navigation.previous instead of using mostRecent.response
        var refreshing = false;
        // router.navigate() hooks
        var cancelCallback;
        var finishCallback;
        var observers = [];
        var oneTimers = [];
        function setupRoutesAndInteractions(routeArray) {
            if (routeArray) {
                routes = routeArray.map(createRoute);
                for (var key in routeInteractions) {
                    delete routeInteractions[key];
                }
                // add the pathname interaction to the provided interactions
                userInteractions
                    .concat(generatePathname(options.pathnameOptions))
                    .forEach(function (interaction) {
                    interaction.reset();
                    routeInteractions[interaction.name] = interaction.get;
                    registerRoutes(routes, interaction);
                });
            }
            // assign navigation response handler
            // this will be re-called if router.refresh() is called
            history.respondWith(navigationHandler);
        }
        function navigationHandler(pendingNav) {
            if (activeNavigation) {
                activeNavigation.cancel(pendingNav.action);
                activeNavigation.cancelled = true;
            }
            activeNavigation = pendingNav;
            var navigation = {
                action: pendingNav.action,
                previous: refreshing
                    ? mostRecent.navigation
                        ? mostRecent.navigation.previous
                        : null
                    : mostRecent.response
            };
            refreshing = false;
            var match = matchLocation(pendingNav.location, routes);
            // if no routes match, do nothing
            if (!match.route) {
                console.error("The current location (" + pendingNav.location.pathname + ") has no matching route, " +
                    'so a response could not be emitted. A catch-all route ({ path: "(.*)" }) ' +
                    "can be used to match locations with no other matching route.");
                pendingNav.finish();
                if (finishCallback) {
                    finishCallback();
                }
                resetCallbacks();
                activeNavigation = undefined;
                return;
            }
            if (match.route.sync) {
                finalizeResponseAndEmit(match, pendingNav, navigation, null);
            }
            else {
                resolveRoute(match).then(function (resolved) {
                    if (pendingNav.cancelled) {
                        return;
                    }
                    finalizeResponseAndEmit(match, pendingNav, navigation, resolved);
                });
            }
        }
        function finalizeResponseAndEmit(match, pending, navigation, resolved) {
            var response = finishResponse(match, routeInteractions, resolved);
            if (suspend) {
                navigation.finish = createFinisher(pending, response, navigation);
                emitSuspended(response, navigation);
            }
            else {
                pending.finish();
                emitImmediate(response, navigation);
                activeNavigation = undefined;
            }
        }
        function createFinisher(pending, response, navigation) {
            var called = false;
            return function finisher() {
                if (called || pending.cancelled) {
                    return;
                }
                called = true;
                if (finishCallback) {
                    finishCallback();
                }
                resetCallbacks();
                if (pending.finish) {
                    pending.finish();
                }
                activeNavigation = undefined;
                callSideEffects({ response: response, navigation: navigation, router: router });
            };
        }
        function resetCallbacks() {
            cancelCallback = undefined;
            finishCallback = undefined;
        }
        function callObserversAndOneTimers(emitted) {
            observers.concat(oneTimers.splice(0)).forEach(function (fn) {
                fn(emitted);
            });
        }
        function callSideEffects(emitted) {
            sideEffects.forEach(function (fn) {
                fn(emitted);
            });
        }
        function emitImmediate(response, navigation) {
            if (finishCallback) {
                finishCallback();
            }
            resetCallbacks();
            if (!response.redirectTo || emitRedirects) {
                // store for current(), observe(), and once()
                mostRecent.response = response;
                mostRecent.navigation = navigation;
                callObserversAndOneTimers({ response: response, navigation: navigation, router: router });
                callSideEffects({ response: response, navigation: navigation, router: router });
            }
            if (response.redirectTo !== undefined) {
                history.navigate(response.redirectTo, "REPLACE");
            }
        }
        function emitSuspended(response, navigation) {
            if (!response.redirectTo || emitRedirects) {
                // store for current() and respond()
                mostRecent.response = response;
                mostRecent.navigation = navigation;
                callObserversAndOneTimers({ response: response, navigation: navigation, router: router });
            }
            if (response.redirectTo !== undefined) {
                history.navigate(response.redirectTo, "REPLACE");
            }
        }
        var router = {
            route: routeInteractions,
            history: history,
            observe: function (fn, options) {
                var _a = (options || {}).initial, initial = _a === void 0 ? true : _a;
                observers.push(fn);
                if (mostRecent.response && initial) {
                    fn.call(null, __assign({}, mostRecent, { router: router }));
                }
                return function () {
                    observers = observers.filter(function (obs) {
                        return obs !== fn;
                    });
                };
            },
            once: function (fn, options) {
                var _a = (options || {}).initial, initial = _a === void 0 ? true : _a;
                if (mostRecent.response && initial) {
                    fn.call(null, __assign({}, mostRecent, { router: router }));
                }
                else {
                    oneTimers.push(fn);
                }
            },
            refresh: function (routes) {
                refreshing = true;
                setupRoutesAndInteractions(routes);
            },
            current: function () {
                return mostRecent;
            },
            navigate: function (details) {
                if (cancelCallback) {
                    cancelCallback();
                }
                resetCallbacks();
                var name = details.name, params = details.params, hash = details.hash, query = details.query, state = details.state, _a = details.method, method = _a === void 0 ? "ANCHOR" : _a;
                var pathname = name != null
                    ? routeInteractions.pathname(name, params)
                    : history.location.pathname;
                if (method !== "ANCHOR" && method !== "PUSH" && method !== "REPLACE") {
                    method = "ANCHOR";
                }
                cancelCallback = details.cancelled;
                finishCallback = details.finished;
                history.navigate({
                    pathname: pathname,
                    hash: hash,
                    query: query,
                    state: state
                }, method);
            }
        };
        // now that everything is defined, actually do the setup
        setupRoutesAndInteractions(routeArray);
        return router;
    }

    function once(fn) {
        var promise;
        var hasRun = false;
        return function () {
            if (hasRun) {
                return promise;
            }
            promise = fn.apply(null, arguments);
            hasRun = true;
            return promise;
        };
    }

    exports.curi = createRouter;
    exports.once = once;
    exports.pathname = generatePathname;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
